// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/bigquery/bigquery.proto

#include "structs/bigquery/bigquery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace structs {
PROTOBUF_CONSTEXPR BigQueryField::BigQueryField(
    ::_pbi::ConstantInitialized) {}
struct BigQueryFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigQueryFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigQueryFieldDefaultTypeInternal() {}
  union {
    BigQueryField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigQueryFieldDefaultTypeInternal _BigQueryField_default_instance_;
PROTOBUF_CONSTEXPR BigQuerySchema::BigQuerySchema(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bigquery_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.structs_schema_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BigQuerySchemaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigQuerySchemaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigQuerySchemaDefaultTypeInternal() {}
  union {
    BigQuerySchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigQuerySchemaDefaultTypeInternal _BigQuerySchema_default_instance_;
PROTOBUF_CONSTEXPR BigQuerySchemas::BigQuerySchemas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BigQuerySchemasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigQuerySchemasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigQuerySchemasDefaultTypeInternal() {}
  union {
    BigQuerySchemas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigQuerySchemasDefaultTypeInternal _BigQuerySchemas_default_instance_;
}  // namespace structs
static ::_pb::Metadata file_level_metadata_structs_2fbigquery_2fbigquery_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_structs_2fbigquery_2fbigquery_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_structs_2fbigquery_2fbigquery_2eproto = nullptr;

const uint32_t TableStruct_structs_2fbigquery_2fbigquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structs::BigQueryField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structs::BigQuerySchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::structs::BigQuerySchema, _impl_.structs_schema_),
  PROTOBUF_FIELD_OFFSET(::structs::BigQuerySchema, _impl_.bigquery_table_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structs::BigQuerySchemas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::structs::BigQuerySchemas, _impl_.schema_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::structs::BigQueryField)},
  { 6, -1, -1, sizeof(::structs::BigQuerySchema)},
  { 14, -1, -1, sizeof(::structs::BigQuerySchemas)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::structs::_BigQueryField_default_instance_._instance,
  &::structs::_BigQuerySchema_default_instance_._instance,
  &::structs::_BigQuerySchemas_default_instance_._instance,
};

const char descriptor_table_protodef_structs_2fbigquery_2fbigquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037structs/bigquery/bigquery.proto\022\007struc"
  "ts\032\025structs/structs.proto\"\017\n\rBigQueryFie"
  "ld\"\\\n\016BigQuerySchema\022-\n\016structs_schema\030\001"
  " \001(\0132\025.structs.StructSchema\022\033\n\023bigquery_"
  "table_name\030\002 \001(\t\":\n\017BigQuerySchemas\022\'\n\006s"
  "chema\030\001 \003(\0132\027.structs.BigQuerySchemab\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_structs_2fbigquery_2fbigquery_2eproto_deps[1] = {
  &::descriptor_table_structs_2fstructs_2eproto,
};
static ::_pbi::once_flag descriptor_table_structs_2fbigquery_2fbigquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_structs_2fbigquery_2fbigquery_2eproto = {
    false, false, 244, descriptor_table_protodef_structs_2fbigquery_2fbigquery_2eproto,
    "structs/bigquery/bigquery.proto",
    &descriptor_table_structs_2fbigquery_2fbigquery_2eproto_once, descriptor_table_structs_2fbigquery_2fbigquery_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_structs_2fbigquery_2fbigquery_2eproto::offsets,
    file_level_metadata_structs_2fbigquery_2fbigquery_2eproto, file_level_enum_descriptors_structs_2fbigquery_2fbigquery_2eproto,
    file_level_service_descriptors_structs_2fbigquery_2fbigquery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_structs_2fbigquery_2fbigquery_2eproto_getter() {
  return &descriptor_table_structs_2fbigquery_2fbigquery_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_structs_2fbigquery_2fbigquery_2eproto(&descriptor_table_structs_2fbigquery_2fbigquery_2eproto);
namespace structs {

// ===================================================================

class BigQueryField::_Internal {
 public:
};

BigQueryField::BigQueryField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:structs.BigQueryField)
}
BigQueryField::BigQueryField(const BigQueryField& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  BigQueryField* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:structs.BigQueryField)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigQueryField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigQueryField::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BigQueryField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_structs_2fbigquery_2fbigquery_2eproto_getter, &descriptor_table_structs_2fbigquery_2fbigquery_2eproto_once,
      file_level_metadata_structs_2fbigquery_2fbigquery_2eproto[0]);
}

// ===================================================================

class BigQuerySchema::_Internal {
 public:
  static const ::structs::StructSchema& structs_schema(const BigQuerySchema* msg);
};

const ::structs::StructSchema&
BigQuerySchema::_Internal::structs_schema(const BigQuerySchema* msg) {
  return *msg->_impl_.structs_schema_;
}
void BigQuerySchema::clear_structs_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.structs_schema_ != nullptr) {
    delete _impl_.structs_schema_;
  }
  _impl_.structs_schema_ = nullptr;
}
BigQuerySchema::BigQuerySchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:structs.BigQuerySchema)
}
BigQuerySchema::BigQuerySchema(const BigQuerySchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BigQuerySchema* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bigquery_table_name_){}
    , decltype(_impl_.structs_schema_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bigquery_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigquery_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bigquery_table_name().empty()) {
    _this->_impl_.bigquery_table_name_.Set(from._internal_bigquery_table_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_structs_schema()) {
    _this->_impl_.structs_schema_ = new ::structs::StructSchema(*from._impl_.structs_schema_);
  }
  // @@protoc_insertion_point(copy_constructor:structs.BigQuerySchema)
}

inline void BigQuerySchema::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bigquery_table_name_){}
    , decltype(_impl_.structs_schema_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bigquery_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigquery_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BigQuerySchema::~BigQuerySchema() {
  // @@protoc_insertion_point(destructor:structs.BigQuerySchema)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BigQuerySchema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bigquery_table_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.structs_schema_;
}

void BigQuerySchema::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BigQuerySchema::Clear() {
// @@protoc_insertion_point(message_clear_start:structs.BigQuerySchema)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bigquery_table_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.structs_schema_ != nullptr) {
    delete _impl_.structs_schema_;
  }
  _impl_.structs_schema_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigQuerySchema::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .structs.StructSchema structs_schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_structs_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bigquery_table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bigquery_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "structs.BigQuerySchema.bigquery_table_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BigQuerySchema::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structs.BigQuerySchema)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .structs.StructSchema structs_schema = 1;
  if (this->_internal_has_structs_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::structs_schema(this),
        _Internal::structs_schema(this).GetCachedSize(), target, stream);
  }

  // string bigquery_table_name = 2;
  if (!this->_internal_bigquery_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bigquery_table_name().data(), static_cast<int>(this->_internal_bigquery_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.BigQuerySchema.bigquery_table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bigquery_table_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structs.BigQuerySchema)
  return target;
}

size_t BigQuerySchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structs.BigQuerySchema)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bigquery_table_name = 2;
  if (!this->_internal_bigquery_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bigquery_table_name());
  }

  // .structs.StructSchema structs_schema = 1;
  if (this->_internal_has_structs_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.structs_schema_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigQuerySchema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BigQuerySchema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigQuerySchema::GetClassData() const { return &_class_data_; }


void BigQuerySchema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BigQuerySchema*>(&to_msg);
  auto& from = static_cast<const BigQuerySchema&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:structs.BigQuerySchema)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bigquery_table_name().empty()) {
    _this->_internal_set_bigquery_table_name(from._internal_bigquery_table_name());
  }
  if (from._internal_has_structs_schema()) {
    _this->_internal_mutable_structs_schema()->::structs::StructSchema::MergeFrom(
        from._internal_structs_schema());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BigQuerySchema::CopyFrom(const BigQuerySchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structs.BigQuerySchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQuerySchema::IsInitialized() const {
  return true;
}

void BigQuerySchema::InternalSwap(BigQuerySchema* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bigquery_table_name_, lhs_arena,
      &other->_impl_.bigquery_table_name_, rhs_arena
  );
  swap(_impl_.structs_schema_, other->_impl_.structs_schema_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigQuerySchema::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_structs_2fbigquery_2fbigquery_2eproto_getter, &descriptor_table_structs_2fbigquery_2fbigquery_2eproto_once,
      file_level_metadata_structs_2fbigquery_2fbigquery_2eproto[1]);
}

// ===================================================================

class BigQuerySchemas::_Internal {
 public:
};

BigQuerySchemas::BigQuerySchemas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:structs.BigQuerySchemas)
}
BigQuerySchemas::BigQuerySchemas(const BigQuerySchemas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BigQuerySchemas* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_){from._impl_.schema_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:structs.BigQuerySchemas)
}

inline void BigQuerySchemas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BigQuerySchemas::~BigQuerySchemas() {
  // @@protoc_insertion_point(destructor:structs.BigQuerySchemas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BigQuerySchemas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_.~RepeatedPtrField();
}

void BigQuerySchemas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BigQuerySchemas::Clear() {
// @@protoc_insertion_point(message_clear_start:structs.BigQuerySchemas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigQuerySchemas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .structs.BigQuerySchema schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schema(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BigQuerySchemas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structs.BigQuerySchemas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .structs.BigQuerySchema schema = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_schema_size()); i < n; i++) {
    const auto& repfield = this->_internal_schema(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structs.BigQuerySchemas)
  return target;
}

size_t BigQuerySchemas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structs.BigQuerySchemas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structs.BigQuerySchema schema = 1;
  total_size += 1UL * this->_internal_schema_size();
  for (const auto& msg : this->_impl_.schema_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigQuerySchemas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BigQuerySchemas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigQuerySchemas::GetClassData() const { return &_class_data_; }


void BigQuerySchemas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BigQuerySchemas*>(&to_msg);
  auto& from = static_cast<const BigQuerySchemas&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:structs.BigQuerySchemas)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.schema_.MergeFrom(from._impl_.schema_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BigQuerySchemas::CopyFrom(const BigQuerySchemas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structs.BigQuerySchemas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQuerySchemas::IsInitialized() const {
  return true;
}

void BigQuerySchemas::InternalSwap(BigQuerySchemas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.schema_.InternalSwap(&other->_impl_.schema_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigQuerySchemas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_structs_2fbigquery_2fbigquery_2eproto_getter, &descriptor_table_structs_2fbigquery_2fbigquery_2eproto_once,
      file_level_metadata_structs_2fbigquery_2fbigquery_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace structs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::structs::BigQueryField*
Arena::CreateMaybeMessage< ::structs::BigQueryField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structs::BigQueryField >(arena);
}
template<> PROTOBUF_NOINLINE ::structs::BigQuerySchema*
Arena::CreateMaybeMessage< ::structs::BigQuerySchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structs::BigQuerySchema >(arena);
}
template<> PROTOBUF_NOINLINE ::structs::BigQuerySchemas*
Arena::CreateMaybeMessage< ::structs::BigQuerySchemas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structs::BigQuerySchemas >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/bigquery/bigquery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_structs_2fbigquery_2fbigquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_structs_2fbigquery_2fbigquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "structs/structs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_structs_2fbigquery_2fbigquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_structs_2fbigquery_2fbigquery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_structs_2fbigquery_2fbigquery_2eproto;
namespace structs {
class BigQueryField;
struct BigQueryFieldDefaultTypeInternal;
extern BigQueryFieldDefaultTypeInternal _BigQueryField_default_instance_;
class BigQuerySchema;
struct BigQuerySchemaDefaultTypeInternal;
extern BigQuerySchemaDefaultTypeInternal _BigQuerySchema_default_instance_;
class BigQuerySchemas;
struct BigQuerySchemasDefaultTypeInternal;
extern BigQuerySchemasDefaultTypeInternal _BigQuerySchemas_default_instance_;
}  // namespace structs
PROTOBUF_NAMESPACE_OPEN
template<> ::structs::BigQueryField* Arena::CreateMaybeMessage<::structs::BigQueryField>(Arena*);
template<> ::structs::BigQuerySchema* Arena::CreateMaybeMessage<::structs::BigQuerySchema>(Arena*);
template<> ::structs::BigQuerySchemas* Arena::CreateMaybeMessage<::structs::BigQuerySchemas>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace structs {

// ===================================================================

class BigQueryField final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:structs.BigQueryField) */ {
 public:
  inline BigQueryField() : BigQueryField(nullptr) {}
  explicit constexpr BigQueryField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigQueryField(const BigQueryField& from);
  BigQueryField(BigQueryField&& from) noexcept
    : BigQueryField() {
    *this = ::std::move(from);
  }

  inline BigQueryField& operator=(const BigQueryField& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQueryField& operator=(BigQueryField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigQueryField& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigQueryField* internal_default_instance() {
    return reinterpret_cast<const BigQueryField*>(
               &_BigQueryField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BigQueryField& a, BigQueryField& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQueryField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQueryField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigQueryField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigQueryField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BigQueryField& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BigQueryField& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structs.BigQueryField";
  }
  protected:
  explicit BigQueryField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:structs.BigQueryField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structs_2fbigquery_2fbigquery_2eproto;
};
// -------------------------------------------------------------------

class BigQuerySchema final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structs.BigQuerySchema) */ {
 public:
  inline BigQuerySchema() : BigQuerySchema(nullptr) {}
  ~BigQuerySchema() override;
  explicit constexpr BigQuerySchema(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigQuerySchema(const BigQuerySchema& from);
  BigQuerySchema(BigQuerySchema&& from) noexcept
    : BigQuerySchema() {
    *this = ::std::move(from);
  }

  inline BigQuerySchema& operator=(const BigQuerySchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQuerySchema& operator=(BigQuerySchema&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigQuerySchema& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigQuerySchema* internal_default_instance() {
    return reinterpret_cast<const BigQuerySchema*>(
               &_BigQuerySchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BigQuerySchema& a, BigQuerySchema& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQuerySchema* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQuerySchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigQuerySchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigQuerySchema>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigQuerySchema& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BigQuerySchema& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigQuerySchema* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structs.BigQuerySchema";
  }
  protected:
  explicit BigQuerySchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBigqueryTableNameFieldNumber = 2,
    kStructsSchemaFieldNumber = 1,
  };
  // string bigquery_table_name = 2;
  void clear_bigquery_table_name();
  const std::string& bigquery_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bigquery_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bigquery_table_name();
  PROTOBUF_NODISCARD std::string* release_bigquery_table_name();
  void set_allocated_bigquery_table_name(std::string* bigquery_table_name);
  private:
  const std::string& _internal_bigquery_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bigquery_table_name(const std::string& value);
  std::string* _internal_mutable_bigquery_table_name();
  public:

  // .structs.StructSchema structs_schema = 1;
  bool has_structs_schema() const;
  private:
  bool _internal_has_structs_schema() const;
  public:
  void clear_structs_schema();
  const ::structs::StructSchema& structs_schema() const;
  PROTOBUF_NODISCARD ::structs::StructSchema* release_structs_schema();
  ::structs::StructSchema* mutable_structs_schema();
  void set_allocated_structs_schema(::structs::StructSchema* structs_schema);
  private:
  const ::structs::StructSchema& _internal_structs_schema() const;
  ::structs::StructSchema* _internal_mutable_structs_schema();
  public:
  void unsafe_arena_set_allocated_structs_schema(
      ::structs::StructSchema* structs_schema);
  ::structs::StructSchema* unsafe_arena_release_structs_schema();

  // @@protoc_insertion_point(class_scope:structs.BigQuerySchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bigquery_table_name_;
  ::structs::StructSchema* structs_schema_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structs_2fbigquery_2fbigquery_2eproto;
};
// -------------------------------------------------------------------

class BigQuerySchemas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structs.BigQuerySchemas) */ {
 public:
  inline BigQuerySchemas() : BigQuerySchemas(nullptr) {}
  ~BigQuerySchemas() override;
  explicit constexpr BigQuerySchemas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigQuerySchemas(const BigQuerySchemas& from);
  BigQuerySchemas(BigQuerySchemas&& from) noexcept
    : BigQuerySchemas() {
    *this = ::std::move(from);
  }

  inline BigQuerySchemas& operator=(const BigQuerySchemas& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQuerySchemas& operator=(BigQuerySchemas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigQuerySchemas& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigQuerySchemas* internal_default_instance() {
    return reinterpret_cast<const BigQuerySchemas*>(
               &_BigQuerySchemas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BigQuerySchemas& a, BigQuerySchemas& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQuerySchemas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQuerySchemas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigQuerySchemas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigQuerySchemas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigQuerySchemas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BigQuerySchemas& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigQuerySchemas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structs.BigQuerySchemas";
  }
  protected:
  explicit BigQuerySchemas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFieldNumber = 1,
  };
  // repeated .structs.BigQuerySchema schema = 1;
  int schema_size() const;
  private:
  int _internal_schema_size() const;
  public:
  void clear_schema();
  ::structs::BigQuerySchema* mutable_schema(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::BigQuerySchema >*
      mutable_schema();
  private:
  const ::structs::BigQuerySchema& _internal_schema(int index) const;
  ::structs::BigQuerySchema* _internal_add_schema();
  public:
  const ::structs::BigQuerySchema& schema(int index) const;
  ::structs::BigQuerySchema* add_schema();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::BigQuerySchema >&
      schema() const;

  // @@protoc_insertion_point(class_scope:structs.BigQuerySchemas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::BigQuerySchema > schema_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structs_2fbigquery_2fbigquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BigQueryField

// -------------------------------------------------------------------

// BigQuerySchema

// .structs.StructSchema structs_schema = 1;
inline bool BigQuerySchema::_internal_has_structs_schema() const {
  return this != internal_default_instance() && structs_schema_ != nullptr;
}
inline bool BigQuerySchema::has_structs_schema() const {
  return _internal_has_structs_schema();
}
inline const ::structs::StructSchema& BigQuerySchema::_internal_structs_schema() const {
  const ::structs::StructSchema* p = structs_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::structs::StructSchema&>(
      ::structs::_StructSchema_default_instance_);
}
inline const ::structs::StructSchema& BigQuerySchema::structs_schema() const {
  // @@protoc_insertion_point(field_get:structs.BigQuerySchema.structs_schema)
  return _internal_structs_schema();
}
inline void BigQuerySchema::unsafe_arena_set_allocated_structs_schema(
    ::structs::StructSchema* structs_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structs_schema_);
  }
  structs_schema_ = structs_schema;
  if (structs_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structs.BigQuerySchema.structs_schema)
}
inline ::structs::StructSchema* BigQuerySchema::release_structs_schema() {
  
  ::structs::StructSchema* temp = structs_schema_;
  structs_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::structs::StructSchema* BigQuerySchema::unsafe_arena_release_structs_schema() {
  // @@protoc_insertion_point(field_release:structs.BigQuerySchema.structs_schema)
  
  ::structs::StructSchema* temp = structs_schema_;
  structs_schema_ = nullptr;
  return temp;
}
inline ::structs::StructSchema* BigQuerySchema::_internal_mutable_structs_schema() {
  
  if (structs_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::structs::StructSchema>(GetArenaForAllocation());
    structs_schema_ = p;
  }
  return structs_schema_;
}
inline ::structs::StructSchema* BigQuerySchema::mutable_structs_schema() {
  ::structs::StructSchema* _msg = _internal_mutable_structs_schema();
  // @@protoc_insertion_point(field_mutable:structs.BigQuerySchema.structs_schema)
  return _msg;
}
inline void BigQuerySchema::set_allocated_structs_schema(::structs::StructSchema* structs_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(structs_schema_);
  }
  if (structs_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structs_schema));
    if (message_arena != submessage_arena) {
      structs_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structs_schema, submessage_arena);
    }
    
  } else {
    
  }
  structs_schema_ = structs_schema;
  // @@protoc_insertion_point(field_set_allocated:structs.BigQuerySchema.structs_schema)
}

// string bigquery_table_name = 2;
inline void BigQuerySchema::clear_bigquery_table_name() {
  bigquery_table_name_.ClearToEmpty();
}
inline const std::string& BigQuerySchema::bigquery_table_name() const {
  // @@protoc_insertion_point(field_get:structs.BigQuerySchema.bigquery_table_name)
  return _internal_bigquery_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BigQuerySchema::set_bigquery_table_name(ArgT0&& arg0, ArgT... args) {
 
 bigquery_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.BigQuerySchema.bigquery_table_name)
}
inline std::string* BigQuerySchema::mutable_bigquery_table_name() {
  std::string* _s = _internal_mutable_bigquery_table_name();
  // @@protoc_insertion_point(field_mutable:structs.BigQuerySchema.bigquery_table_name)
  return _s;
}
inline const std::string& BigQuerySchema::_internal_bigquery_table_name() const {
  return bigquery_table_name_.Get();
}
inline void BigQuerySchema::_internal_set_bigquery_table_name(const std::string& value) {
  
  bigquery_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BigQuerySchema::_internal_mutable_bigquery_table_name() {
  
  return bigquery_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BigQuerySchema::release_bigquery_table_name() {
  // @@protoc_insertion_point(field_release:structs.BigQuerySchema.bigquery_table_name)
  return bigquery_table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BigQuerySchema::set_allocated_bigquery_table_name(std::string* bigquery_table_name) {
  if (bigquery_table_name != nullptr) {
    
  } else {
    
  }
  bigquery_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bigquery_table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bigquery_table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bigquery_table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.BigQuerySchema.bigquery_table_name)
}

// -------------------------------------------------------------------

// BigQuerySchemas

// repeated .structs.BigQuerySchema schema = 1;
inline int BigQuerySchemas::_internal_schema_size() const {
  return schema_.size();
}
inline int BigQuerySchemas::schema_size() const {
  return _internal_schema_size();
}
inline void BigQuerySchemas::clear_schema() {
  schema_.Clear();
}
inline ::structs::BigQuerySchema* BigQuerySchemas::mutable_schema(int index) {
  // @@protoc_insertion_point(field_mutable:structs.BigQuerySchemas.schema)
  return schema_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::BigQuerySchema >*
BigQuerySchemas::mutable_schema() {
  // @@protoc_insertion_point(field_mutable_list:structs.BigQuerySchemas.schema)
  return &schema_;
}
inline const ::structs::BigQuerySchema& BigQuerySchemas::_internal_schema(int index) const {
  return schema_.Get(index);
}
inline const ::structs::BigQuerySchema& BigQuerySchemas::schema(int index) const {
  // @@protoc_insertion_point(field_get:structs.BigQuerySchemas.schema)
  return _internal_schema(index);
}
inline ::structs::BigQuerySchema* BigQuerySchemas::_internal_add_schema() {
  return schema_.Add();
}
inline ::structs::BigQuerySchema* BigQuerySchemas::add_schema() {
  ::structs::BigQuerySchema* _add = _internal_add_schema();
  // @@protoc_insertion_point(field_add:structs.BigQuerySchemas.schema)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::BigQuerySchema >&
BigQuerySchemas::schema() const {
  // @@protoc_insertion_point(field_list:structs.BigQuerySchemas.schema)
  return schema_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace structs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_structs_2fbigquery_2fbigquery_2eproto

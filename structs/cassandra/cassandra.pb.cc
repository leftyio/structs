// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/cassandra/cassandra.proto

#include "structs/cassandra/cassandra.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace structs {
constexpr CassandraField::CassandraField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_id_(false)
  , is_bytes_(false)
  , is_transient_(false)
  , repeated_handling_(0)

  , id_cardinality_(0){}
struct CassandraFieldDefaultTypeInternal {
  constexpr CassandraFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CassandraFieldDefaultTypeInternal() {}
  union {
    CassandraField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CassandraFieldDefaultTypeInternal _CassandraField_default_instance_;
constexpr CassandraSchema::CassandraSchema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , message_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , compaction_strategy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , compression_strategy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , java_package_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , java_class_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CassandraSchemaDefaultTypeInternal {
  constexpr CassandraSchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CassandraSchemaDefaultTypeInternal() {}
  union {
    CassandraSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CassandraSchemaDefaultTypeInternal _CassandraSchema_default_instance_;
constexpr CassandraSchemas::CassandraSchemas(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schema_(){}
struct CassandraSchemasDefaultTypeInternal {
  constexpr CassandraSchemasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CassandraSchemasDefaultTypeInternal() {}
  union {
    CassandraSchemas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CassandraSchemasDefaultTypeInternal _CassandraSchemas_default_instance_;
}  // namespace structs
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_structs_2fcassandra_2fcassandra_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_structs_2fcassandra_2fcassandra_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_structs_2fcassandra_2fcassandra_2eproto = nullptr;

const uint32_t TableStruct_structs_2fcassandra_2fcassandra_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structs::CassandraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::structs::CassandraField, path_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraField, is_id_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraField, id_cardinality_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraField, is_bytes_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraField, is_transient_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraField, field_name_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraField, repeated_handling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchema, message_name_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchema, table_name_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchema, fields_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchema, compaction_strategy_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchema, compression_strategy_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchema, java_package_),
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchema, java_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchemas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::structs::CassandraSchemas, schema_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::structs::CassandraField)},
  { 13, -1, -1, sizeof(::structs::CassandraSchema)},
  { 26, -1, -1, sizeof(::structs::CassandraSchemas)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structs::_CassandraField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structs::_CassandraSchema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structs::_CassandraSchemas_default_instance_),
};

const char descriptor_table_protodef_structs_2fcassandra_2fcassandra_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!structs/cassandra/cassandra.proto\022\007str"
  "ucts\"\266\001\n\016CassandraField\022\014\n\004path\030\001 \001(\t\022\r\n"
  "\005is_id\030\002 \001(\010\022\026\n\016id_cardinality\030\007 \001(\005\022\020\n\010"
  "is_bytes\030\003 \001(\010\022\024\n\014is_transient\030\004 \001(\010\022\022\n\n"
  "field_name\030\005 \001(\t\0223\n\021repeated_handling\030\006 "
  "\001(\0162\030.structs.RepeatedHandler\"\311\001\n\017Cassan"
  "draSchema\022\024\n\014message_name\030\001 \001(\t\022\022\n\ntable"
  "_name\030\002 \001(\t\022\'\n\006fields\030\003 \003(\0132\027.structs.Ca"
  "ssandraField\022\033\n\023compaction_strategy\030\004 \001("
  "\t\022\034\n\024compression_strategy\030\005 \001(\t\022\024\n\014java_"
  "package\030\006 \001(\t\022\022\n\njava_class\030\007 \001(\t\"<\n\020Cas"
  "sandraSchemas\022(\n\006schema\030\001 \003(\0132\030.structs."
  "CassandraSchema*P\n\017RepeatedHandler\022\010\n\004LI"
  "ST\020\000\022\017\n\013FROZEN_LIST\020\001\022\t\n\005BYTES\020\002\022\016\n\nFROZ"
  "EN_SET\020\003\022\007\n\003SET\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_structs_2fcassandra_2fcassandra_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_structs_2fcassandra_2fcassandra_2eproto = {
  false, false, 585, descriptor_table_protodef_structs_2fcassandra_2fcassandra_2eproto, "structs/cassandra/cassandra.proto", 
  &descriptor_table_structs_2fcassandra_2fcassandra_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_structs_2fcassandra_2fcassandra_2eproto::offsets,
  file_level_metadata_structs_2fcassandra_2fcassandra_2eproto, file_level_enum_descriptors_structs_2fcassandra_2fcassandra_2eproto, file_level_service_descriptors_structs_2fcassandra_2fcassandra_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_structs_2fcassandra_2fcassandra_2eproto_getter() {
  return &descriptor_table_structs_2fcassandra_2fcassandra_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_structs_2fcassandra_2fcassandra_2eproto(&descriptor_table_structs_2fcassandra_2fcassandra_2eproto);
namespace structs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RepeatedHandler_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structs_2fcassandra_2fcassandra_2eproto);
  return file_level_enum_descriptors_structs_2fcassandra_2fcassandra_2eproto[0];
}
bool RepeatedHandler_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CassandraField::_Internal {
 public:
};

CassandraField::CassandraField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:structs.CassandraField)
}
CassandraField::CassandraField(const CassandraField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_id_, &from.is_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_cardinality_) -
    reinterpret_cast<char*>(&is_id_)) + sizeof(id_cardinality_));
  // @@protoc_insertion_point(copy_constructor:structs.CassandraField)
}

inline void CassandraField::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_cardinality_) -
    reinterpret_cast<char*>(&is_id_)) + sizeof(id_cardinality_));
}

CassandraField::~CassandraField() {
  // @@protoc_insertion_point(destructor:structs.CassandraField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CassandraField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CassandraField::ArenaDtor(void* object) {
  CassandraField* _this = reinterpret_cast< CassandraField* >(object);
  (void)_this;
}
void CassandraField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CassandraField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CassandraField::Clear() {
// @@protoc_insertion_point(message_clear_start:structs.CassandraField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  field_name_.ClearToEmpty();
  ::memset(&is_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_cardinality_) -
      reinterpret_cast<char*>(&is_id_)) + sizeof(id_cardinality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CassandraField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structs.CassandraField.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_transient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          is_transient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string field_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structs.CassandraField.field_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .structs.RepeatedHandler repeated_handling = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_repeated_handling(static_cast<::structs::RepeatedHandler>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 id_cardinality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          id_cardinality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CassandraField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structs.CassandraField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.CassandraField.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // bool is_id = 2;
  if (this->_internal_is_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_id(), target);
  }

  // bool is_bytes = 3;
  if (this->_internal_is_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_bytes(), target);
  }

  // bool is_transient = 4;
  if (this->_internal_is_transient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_transient(), target);
  }

  // string field_name = 5;
  if (!this->_internal_field_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.CassandraField.field_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_field_name(), target);
  }

  // .structs.RepeatedHandler repeated_handling = 6;
  if (this->_internal_repeated_handling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_repeated_handling(), target);
  }

  // int32 id_cardinality = 7;
  if (this->_internal_id_cardinality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_id_cardinality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structs.CassandraField)
  return target;
}

size_t CassandraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structs.CassandraField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string field_name = 5;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // bool is_id = 2;
  if (this->_internal_is_id() != 0) {
    total_size += 1 + 1;
  }

  // bool is_bytes = 3;
  if (this->_internal_is_bytes() != 0) {
    total_size += 1 + 1;
  }

  // bool is_transient = 4;
  if (this->_internal_is_transient() != 0) {
    total_size += 1 + 1;
  }

  // .structs.RepeatedHandler repeated_handling = 6;
  if (this->_internal_repeated_handling() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_repeated_handling());
  }

  // int32 id_cardinality = 7;
  if (this->_internal_id_cardinality() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id_cardinality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CassandraField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CassandraField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CassandraField::GetClassData() const { return &_class_data_; }

void CassandraField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CassandraField *>(to)->MergeFrom(
      static_cast<const CassandraField &>(from));
}


void CassandraField::MergeFrom(const CassandraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structs.CassandraField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (!from._internal_field_name().empty()) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (from._internal_is_id() != 0) {
    _internal_set_is_id(from._internal_is_id());
  }
  if (from._internal_is_bytes() != 0) {
    _internal_set_is_bytes(from._internal_is_bytes());
  }
  if (from._internal_is_transient() != 0) {
    _internal_set_is_transient(from._internal_is_transient());
  }
  if (from._internal_repeated_handling() != 0) {
    _internal_set_repeated_handling(from._internal_repeated_handling());
  }
  if (from._internal_id_cardinality() != 0) {
    _internal_set_id_cardinality(from._internal_id_cardinality());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CassandraField::CopyFrom(const CassandraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structs.CassandraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CassandraField::IsInitialized() const {
  return true;
}

void CassandraField::InternalSwap(CassandraField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_name_, lhs_arena,
      &other->field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CassandraField, id_cardinality_)
      + sizeof(CassandraField::id_cardinality_)
      - PROTOBUF_FIELD_OFFSET(CassandraField, is_id_)>(
          reinterpret_cast<char*>(&is_id_),
          reinterpret_cast<char*>(&other->is_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CassandraField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_structs_2fcassandra_2fcassandra_2eproto_getter, &descriptor_table_structs_2fcassandra_2fcassandra_2eproto_once,
      file_level_metadata_structs_2fcassandra_2fcassandra_2eproto[0]);
}

// ===================================================================

class CassandraSchema::_Internal {
 public:
};

CassandraSchema::CassandraSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:structs.CassandraSchema)
}
CassandraSchema::CassandraSchema(const CassandraSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_name().empty()) {
    message_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_name(), 
      GetArenaForAllocation());
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  compaction_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    compaction_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compaction_strategy().empty()) {
    compaction_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_compaction_strategy(), 
      GetArenaForAllocation());
  }
  compression_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    compression_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compression_strategy().empty()) {
    compression_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_compression_strategy(), 
      GetArenaForAllocation());
  }
  java_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    java_package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_java_package().empty()) {
    java_package_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_java_package(), 
      GetArenaForAllocation());
  }
  java_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    java_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_java_class().empty()) {
    java_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_java_class(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:structs.CassandraSchema)
}

inline void CassandraSchema::SharedCtor() {
message_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
compaction_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  compaction_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
compression_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  compression_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
java_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  java_package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
java_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  java_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CassandraSchema::~CassandraSchema() {
  // @@protoc_insertion_point(destructor:structs.CassandraSchema)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CassandraSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compaction_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compression_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  java_package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  java_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CassandraSchema::ArenaDtor(void* object) {
  CassandraSchema* _this = reinterpret_cast< CassandraSchema* >(object);
  (void)_this;
}
void CassandraSchema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CassandraSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CassandraSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:structs.CassandraSchema)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  message_name_.ClearToEmpty();
  table_name_.ClearToEmpty();
  compaction_strategy_.ClearToEmpty();
  compression_strategy_.ClearToEmpty();
  java_package_.ClearToEmpty();
  java_class_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CassandraSchema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structs.CassandraSchema.message_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structs.CassandraSchema.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .structs.CassandraField fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string compaction_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_compaction_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structs.CassandraSchema.compaction_strategy"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string compression_strategy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_compression_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structs.CassandraSchema.compression_strategy"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string java_package = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_java_package();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structs.CassandraSchema.java_package"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string java_class = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_java_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "structs.CassandraSchema.java_class"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CassandraSchema::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structs.CassandraSchema)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_name = 1;
  if (!this->_internal_message_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_name().data(), static_cast<int>(this->_internal_message_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.CassandraSchema.message_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_name(), target);
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.CassandraSchema.table_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_name(), target);
  }

  // repeated .structs.CassandraField fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fields(i), target, stream);
  }

  // string compaction_strategy = 4;
  if (!this->_internal_compaction_strategy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compaction_strategy().data(), static_cast<int>(this->_internal_compaction_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.CassandraSchema.compaction_strategy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_compaction_strategy(), target);
  }

  // string compression_strategy = 5;
  if (!this->_internal_compression_strategy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compression_strategy().data(), static_cast<int>(this->_internal_compression_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.CassandraSchema.compression_strategy");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_compression_strategy(), target);
  }

  // string java_package = 6;
  if (!this->_internal_java_package().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_java_package().data(), static_cast<int>(this->_internal_java_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.CassandraSchema.java_package");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_java_package(), target);
  }

  // string java_class = 7;
  if (!this->_internal_java_class().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_java_class().data(), static_cast<int>(this->_internal_java_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "structs.CassandraSchema.java_class");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_java_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structs.CassandraSchema)
  return target;
}

size_t CassandraSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structs.CassandraSchema)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structs.CassandraField fields = 3;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_name = 1;
  if (!this->_internal_message_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_name());
  }

  // string table_name = 2;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string compaction_strategy = 4;
  if (!this->_internal_compaction_strategy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compaction_strategy());
  }

  // string compression_strategy = 5;
  if (!this->_internal_compression_strategy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compression_strategy());
  }

  // string java_package = 6;
  if (!this->_internal_java_package().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_java_package());
  }

  // string java_class = 7;
  if (!this->_internal_java_class().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_java_class());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CassandraSchema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CassandraSchema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CassandraSchema::GetClassData() const { return &_class_data_; }

void CassandraSchema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CassandraSchema *>(to)->MergeFrom(
      static_cast<const CassandraSchema &>(from));
}


void CassandraSchema::MergeFrom(const CassandraSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structs.CassandraSchema)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (!from._internal_message_name().empty()) {
    _internal_set_message_name(from._internal_message_name());
  }
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_compaction_strategy().empty()) {
    _internal_set_compaction_strategy(from._internal_compaction_strategy());
  }
  if (!from._internal_compression_strategy().empty()) {
    _internal_set_compression_strategy(from._internal_compression_strategy());
  }
  if (!from._internal_java_package().empty()) {
    _internal_set_java_package(from._internal_java_package());
  }
  if (!from._internal_java_class().empty()) {
    _internal_set_java_class(from._internal_java_class());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CassandraSchema::CopyFrom(const CassandraSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structs.CassandraSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CassandraSchema::IsInitialized() const {
  return true;
}

void CassandraSchema::InternalSwap(CassandraSchema* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_name_, lhs_arena,
      &other->message_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &compaction_strategy_, lhs_arena,
      &other->compaction_strategy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &compression_strategy_, lhs_arena,
      &other->compression_strategy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &java_package_, lhs_arena,
      &other->java_package_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &java_class_, lhs_arena,
      &other->java_class_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CassandraSchema::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_structs_2fcassandra_2fcassandra_2eproto_getter, &descriptor_table_structs_2fcassandra_2fcassandra_2eproto_once,
      file_level_metadata_structs_2fcassandra_2fcassandra_2eproto[1]);
}

// ===================================================================

class CassandraSchemas::_Internal {
 public:
};

CassandraSchemas::CassandraSchemas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  schema_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:structs.CassandraSchemas)
}
CassandraSchemas::CassandraSchemas(const CassandraSchemas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      schema_(from.schema_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:structs.CassandraSchemas)
}

inline void CassandraSchemas::SharedCtor() {
}

CassandraSchemas::~CassandraSchemas() {
  // @@protoc_insertion_point(destructor:structs.CassandraSchemas)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CassandraSchemas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CassandraSchemas::ArenaDtor(void* object) {
  CassandraSchemas* _this = reinterpret_cast< CassandraSchemas* >(object);
  (void)_this;
}
void CassandraSchemas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CassandraSchemas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CassandraSchemas::Clear() {
// @@protoc_insertion_point(message_clear_start:structs.CassandraSchemas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CassandraSchemas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .structs.CassandraSchema schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schema(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CassandraSchemas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structs.CassandraSchemas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .structs.CassandraSchema schema = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_schema_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_schema(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structs.CassandraSchemas)
  return target;
}

size_t CassandraSchemas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structs.CassandraSchemas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .structs.CassandraSchema schema = 1;
  total_size += 1UL * this->_internal_schema_size();
  for (const auto& msg : this->schema_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CassandraSchemas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CassandraSchemas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CassandraSchemas::GetClassData() const { return &_class_data_; }

void CassandraSchemas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CassandraSchemas *>(to)->MergeFrom(
      static_cast<const CassandraSchemas &>(from));
}


void CassandraSchemas::MergeFrom(const CassandraSchemas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structs.CassandraSchemas)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  schema_.MergeFrom(from.schema_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CassandraSchemas::CopyFrom(const CassandraSchemas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structs.CassandraSchemas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CassandraSchemas::IsInitialized() const {
  return true;
}

void CassandraSchemas::InternalSwap(CassandraSchemas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  schema_.InternalSwap(&other->schema_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CassandraSchemas::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_structs_2fcassandra_2fcassandra_2eproto_getter, &descriptor_table_structs_2fcassandra_2fcassandra_2eproto_once,
      file_level_metadata_structs_2fcassandra_2fcassandra_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace structs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::structs::CassandraField* Arena::CreateMaybeMessage< ::structs::CassandraField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structs::CassandraField >(arena);
}
template<> PROTOBUF_NOINLINE ::structs::CassandraSchema* Arena::CreateMaybeMessage< ::structs::CassandraSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structs::CassandraSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::structs::CassandraSchemas* Arena::CreateMaybeMessage< ::structs::CassandraSchemas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structs::CassandraSchemas >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

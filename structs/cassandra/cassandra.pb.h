// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/cassandra/cassandra.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_structs_2fcassandra_2fcassandra_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_structs_2fcassandra_2fcassandra_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_structs_2fcassandra_2fcassandra_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_structs_2fcassandra_2fcassandra_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_structs_2fcassandra_2fcassandra_2eproto;
namespace structs {
class CassandraField;
struct CassandraFieldDefaultTypeInternal;
extern CassandraFieldDefaultTypeInternal _CassandraField_default_instance_;
class CassandraSchema;
struct CassandraSchemaDefaultTypeInternal;
extern CassandraSchemaDefaultTypeInternal _CassandraSchema_default_instance_;
class CassandraSchemas;
struct CassandraSchemasDefaultTypeInternal;
extern CassandraSchemasDefaultTypeInternal _CassandraSchemas_default_instance_;
}  // namespace structs
PROTOBUF_NAMESPACE_OPEN
template<> ::structs::CassandraField* Arena::CreateMaybeMessage<::structs::CassandraField>(Arena*);
template<> ::structs::CassandraSchema* Arena::CreateMaybeMessage<::structs::CassandraSchema>(Arena*);
template<> ::structs::CassandraSchemas* Arena::CreateMaybeMessage<::structs::CassandraSchemas>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace structs {

enum RepeatedHandler : int {
  LIST = 0,
  FROZEN_LIST = 1,
  BYTES = 2,
  FROZEN_SET = 3,
  SET = 4,
  RepeatedHandler_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RepeatedHandler_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RepeatedHandler_IsValid(int value);
constexpr RepeatedHandler RepeatedHandler_MIN = LIST;
constexpr RepeatedHandler RepeatedHandler_MAX = SET;
constexpr int RepeatedHandler_ARRAYSIZE = RepeatedHandler_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RepeatedHandler_descriptor();
template<typename T>
inline const std::string& RepeatedHandler_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RepeatedHandler>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RepeatedHandler_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RepeatedHandler_descriptor(), enum_t_value);
}
inline bool RepeatedHandler_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RepeatedHandler* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RepeatedHandler>(
    RepeatedHandler_descriptor(), name, value);
}
// ===================================================================

class CassandraField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structs.CassandraField) */ {
 public:
  inline CassandraField() : CassandraField(nullptr) {}
  ~CassandraField() override;
  explicit PROTOBUF_CONSTEXPR CassandraField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CassandraField(const CassandraField& from);
  CassandraField(CassandraField&& from) noexcept
    : CassandraField() {
    *this = ::std::move(from);
  }

  inline CassandraField& operator=(const CassandraField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CassandraField& operator=(CassandraField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CassandraField& default_instance() {
    return *internal_default_instance();
  }
  static inline const CassandraField* internal_default_instance() {
    return reinterpret_cast<const CassandraField*>(
               &_CassandraField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CassandraField& a, CassandraField& b) {
    a.Swap(&b);
  }
  inline void Swap(CassandraField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CassandraField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CassandraField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CassandraField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CassandraField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CassandraField& from) {
    CassandraField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CassandraField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structs.CassandraField";
  }
  protected:
  explicit CassandraField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kFieldNameFieldNumber = 5,
    kIsIdFieldNumber = 2,
    kIsBytesFieldNumber = 3,
    kIsTransientFieldNumber = 4,
    kRepeatedHandlingFieldNumber = 6,
    kIdCardinalityFieldNumber = 7,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string field_name = 5;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // bool is_id = 2;
  void clear_is_id();
  bool is_id() const;
  void set_is_id(bool value);
  private:
  bool _internal_is_id() const;
  void _internal_set_is_id(bool value);
  public:

  // bool is_bytes = 3;
  void clear_is_bytes();
  bool is_bytes() const;
  void set_is_bytes(bool value);
  private:
  bool _internal_is_bytes() const;
  void _internal_set_is_bytes(bool value);
  public:

  // bool is_transient = 4;
  void clear_is_transient();
  bool is_transient() const;
  void set_is_transient(bool value);
  private:
  bool _internal_is_transient() const;
  void _internal_set_is_transient(bool value);
  public:

  // .structs.RepeatedHandler repeated_handling = 6;
  void clear_repeated_handling();
  ::structs::RepeatedHandler repeated_handling() const;
  void set_repeated_handling(::structs::RepeatedHandler value);
  private:
  ::structs::RepeatedHandler _internal_repeated_handling() const;
  void _internal_set_repeated_handling(::structs::RepeatedHandler value);
  public:

  // int32 id_cardinality = 7;
  void clear_id_cardinality();
  int32_t id_cardinality() const;
  void set_id_cardinality(int32_t value);
  private:
  int32_t _internal_id_cardinality() const;
  void _internal_set_id_cardinality(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:structs.CassandraField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
    bool is_id_;
    bool is_bytes_;
    bool is_transient_;
    int repeated_handling_;
    int32_t id_cardinality_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_structs_2fcassandra_2fcassandra_2eproto;
};
// -------------------------------------------------------------------

class CassandraSchema final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structs.CassandraSchema) */ {
 public:
  inline CassandraSchema() : CassandraSchema(nullptr) {}
  ~CassandraSchema() override;
  explicit PROTOBUF_CONSTEXPR CassandraSchema(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CassandraSchema(const CassandraSchema& from);
  CassandraSchema(CassandraSchema&& from) noexcept
    : CassandraSchema() {
    *this = ::std::move(from);
  }

  inline CassandraSchema& operator=(const CassandraSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline CassandraSchema& operator=(CassandraSchema&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CassandraSchema& default_instance() {
    return *internal_default_instance();
  }
  static inline const CassandraSchema* internal_default_instance() {
    return reinterpret_cast<const CassandraSchema*>(
               &_CassandraSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CassandraSchema& a, CassandraSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(CassandraSchema* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CassandraSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CassandraSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CassandraSchema>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CassandraSchema& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CassandraSchema& from) {
    CassandraSchema::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CassandraSchema* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structs.CassandraSchema";
  }
  protected:
  explicit CassandraSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kMessageNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
    kCompactionStrategyFieldNumber = 4,
    kCompressionStrategyFieldNumber = 5,
    kJavaPackageFieldNumber = 6,
    kJavaClassFieldNumber = 7,
  };
  // repeated .structs.CassandraField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::structs::CassandraField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraField >*
      mutable_fields();
  private:
  const ::structs::CassandraField& _internal_fields(int index) const;
  ::structs::CassandraField* _internal_add_fields();
  public:
  const ::structs::CassandraField& fields(int index) const;
  ::structs::CassandraField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraField >&
      fields() const;

  // string message_name = 1;
  void clear_message_name();
  const std::string& message_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_name();
  PROTOBUF_NODISCARD std::string* release_message_name();
  void set_allocated_message_name(std::string* message_name);
  private:
  const std::string& _internal_message_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_name(const std::string& value);
  std::string* _internal_mutable_message_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string compaction_strategy = 4;
  void clear_compaction_strategy();
  const std::string& compaction_strategy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compaction_strategy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compaction_strategy();
  PROTOBUF_NODISCARD std::string* release_compaction_strategy();
  void set_allocated_compaction_strategy(std::string* compaction_strategy);
  private:
  const std::string& _internal_compaction_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compaction_strategy(const std::string& value);
  std::string* _internal_mutable_compaction_strategy();
  public:

  // string compression_strategy = 5;
  void clear_compression_strategy();
  const std::string& compression_strategy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compression_strategy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compression_strategy();
  PROTOBUF_NODISCARD std::string* release_compression_strategy();
  void set_allocated_compression_strategy(std::string* compression_strategy);
  private:
  const std::string& _internal_compression_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compression_strategy(const std::string& value);
  std::string* _internal_mutable_compression_strategy();
  public:

  // string java_package = 6;
  void clear_java_package();
  const std::string& java_package() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_java_package(ArgT0&& arg0, ArgT... args);
  std::string* mutable_java_package();
  PROTOBUF_NODISCARD std::string* release_java_package();
  void set_allocated_java_package(std::string* java_package);
  private:
  const std::string& _internal_java_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_java_package(const std::string& value);
  std::string* _internal_mutable_java_package();
  public:

  // string java_class = 7;
  void clear_java_class();
  const std::string& java_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_java_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_java_class();
  PROTOBUF_NODISCARD std::string* release_java_class();
  void set_allocated_java_class(std::string* java_class);
  private:
  const std::string& _internal_java_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_java_class(const std::string& value);
  std::string* _internal_mutable_java_class();
  public:

  // @@protoc_insertion_point(class_scope:structs.CassandraSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraField > fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compaction_strategy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compression_strategy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr java_package_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr java_class_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_structs_2fcassandra_2fcassandra_2eproto;
};
// -------------------------------------------------------------------

class CassandraSchemas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structs.CassandraSchemas) */ {
 public:
  inline CassandraSchemas() : CassandraSchemas(nullptr) {}
  ~CassandraSchemas() override;
  explicit PROTOBUF_CONSTEXPR CassandraSchemas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CassandraSchemas(const CassandraSchemas& from);
  CassandraSchemas(CassandraSchemas&& from) noexcept
    : CassandraSchemas() {
    *this = ::std::move(from);
  }

  inline CassandraSchemas& operator=(const CassandraSchemas& from) {
    CopyFrom(from);
    return *this;
  }
  inline CassandraSchemas& operator=(CassandraSchemas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CassandraSchemas& default_instance() {
    return *internal_default_instance();
  }
  static inline const CassandraSchemas* internal_default_instance() {
    return reinterpret_cast<const CassandraSchemas*>(
               &_CassandraSchemas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CassandraSchemas& a, CassandraSchemas& b) {
    a.Swap(&b);
  }
  inline void Swap(CassandraSchemas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CassandraSchemas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CassandraSchemas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CassandraSchemas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CassandraSchemas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CassandraSchemas& from) {
    CassandraSchemas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CassandraSchemas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structs.CassandraSchemas";
  }
  protected:
  explicit CassandraSchemas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFieldNumber = 1,
  };
  // repeated .structs.CassandraSchema schema = 1;
  int schema_size() const;
  private:
  int _internal_schema_size() const;
  public:
  void clear_schema();
  ::structs::CassandraSchema* mutable_schema(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraSchema >*
      mutable_schema();
  private:
  const ::structs::CassandraSchema& _internal_schema(int index) const;
  ::structs::CassandraSchema* _internal_add_schema();
  public:
  const ::structs::CassandraSchema& schema(int index) const;
  ::structs::CassandraSchema* add_schema();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraSchema >&
      schema() const;

  // @@protoc_insertion_point(class_scope:structs.CassandraSchemas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraSchema > schema_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_structs_2fcassandra_2fcassandra_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CassandraField

// string path = 1;
inline void CassandraField::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& CassandraField::path() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CassandraField::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.CassandraField.path)
}
inline std::string* CassandraField::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:structs.CassandraField.path)
  return _s;
}
inline const std::string& CassandraField::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CassandraField::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CassandraField::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* CassandraField::release_path() {
  // @@protoc_insertion_point(field_release:structs.CassandraField.path)
  return _impl_.path_.Release();
}
inline void CassandraField::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraField.path)
}

// bool is_id = 2;
inline void CassandraField::clear_is_id() {
  _impl_.is_id_ = false;
}
inline bool CassandraField::_internal_is_id() const {
  return _impl_.is_id_;
}
inline bool CassandraField::is_id() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.is_id)
  return _internal_is_id();
}
inline void CassandraField::_internal_set_is_id(bool value) {
  
  _impl_.is_id_ = value;
}
inline void CassandraField::set_is_id(bool value) {
  _internal_set_is_id(value);
  // @@protoc_insertion_point(field_set:structs.CassandraField.is_id)
}

// int32 id_cardinality = 7;
inline void CassandraField::clear_id_cardinality() {
  _impl_.id_cardinality_ = 0;
}
inline int32_t CassandraField::_internal_id_cardinality() const {
  return _impl_.id_cardinality_;
}
inline int32_t CassandraField::id_cardinality() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.id_cardinality)
  return _internal_id_cardinality();
}
inline void CassandraField::_internal_set_id_cardinality(int32_t value) {
  
  _impl_.id_cardinality_ = value;
}
inline void CassandraField::set_id_cardinality(int32_t value) {
  _internal_set_id_cardinality(value);
  // @@protoc_insertion_point(field_set:structs.CassandraField.id_cardinality)
}

// bool is_bytes = 3;
inline void CassandraField::clear_is_bytes() {
  _impl_.is_bytes_ = false;
}
inline bool CassandraField::_internal_is_bytes() const {
  return _impl_.is_bytes_;
}
inline bool CassandraField::is_bytes() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.is_bytes)
  return _internal_is_bytes();
}
inline void CassandraField::_internal_set_is_bytes(bool value) {
  
  _impl_.is_bytes_ = value;
}
inline void CassandraField::set_is_bytes(bool value) {
  _internal_set_is_bytes(value);
  // @@protoc_insertion_point(field_set:structs.CassandraField.is_bytes)
}

// bool is_transient = 4;
inline void CassandraField::clear_is_transient() {
  _impl_.is_transient_ = false;
}
inline bool CassandraField::_internal_is_transient() const {
  return _impl_.is_transient_;
}
inline bool CassandraField::is_transient() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.is_transient)
  return _internal_is_transient();
}
inline void CassandraField::_internal_set_is_transient(bool value) {
  
  _impl_.is_transient_ = value;
}
inline void CassandraField::set_is_transient(bool value) {
  _internal_set_is_transient(value);
  // @@protoc_insertion_point(field_set:structs.CassandraField.is_transient)
}

// string field_name = 5;
inline void CassandraField::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& CassandraField::field_name() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CassandraField::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.field_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.CassandraField.field_name)
}
inline std::string* CassandraField::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:structs.CassandraField.field_name)
  return _s;
}
inline const std::string& CassandraField::_internal_field_name() const {
  return _impl_.field_name_.Get();
}
inline void CassandraField::_internal_set_field_name(const std::string& value) {
  
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CassandraField::_internal_mutable_field_name() {
  
  return _impl_.field_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CassandraField::release_field_name() {
  // @@protoc_insertion_point(field_release:structs.CassandraField.field_name)
  return _impl_.field_name_.Release();
}
inline void CassandraField::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  _impl_.field_name_.SetAllocated(field_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraField.field_name)
}

// .structs.RepeatedHandler repeated_handling = 6;
inline void CassandraField::clear_repeated_handling() {
  _impl_.repeated_handling_ = 0;
}
inline ::structs::RepeatedHandler CassandraField::_internal_repeated_handling() const {
  return static_cast< ::structs::RepeatedHandler >(_impl_.repeated_handling_);
}
inline ::structs::RepeatedHandler CassandraField::repeated_handling() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.repeated_handling)
  return _internal_repeated_handling();
}
inline void CassandraField::_internal_set_repeated_handling(::structs::RepeatedHandler value) {
  
  _impl_.repeated_handling_ = value;
}
inline void CassandraField::set_repeated_handling(::structs::RepeatedHandler value) {
  _internal_set_repeated_handling(value);
  // @@protoc_insertion_point(field_set:structs.CassandraField.repeated_handling)
}

// -------------------------------------------------------------------

// CassandraSchema

// string message_name = 1;
inline void CassandraSchema::clear_message_name() {
  _impl_.message_name_.ClearToEmpty();
}
inline const std::string& CassandraSchema::message_name() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.message_name)
  return _internal_message_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CassandraSchema::set_message_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.message_name)
}
inline std::string* CassandraSchema::mutable_message_name() {
  std::string* _s = _internal_mutable_message_name();
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.message_name)
  return _s;
}
inline const std::string& CassandraSchema::_internal_message_name() const {
  return _impl_.message_name_.Get();
}
inline void CassandraSchema::_internal_set_message_name(const std::string& value) {
  
  _impl_.message_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CassandraSchema::_internal_mutable_message_name() {
  
  return _impl_.message_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CassandraSchema::release_message_name() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.message_name)
  return _impl_.message_name_.Release();
}
inline void CassandraSchema::set_allocated_message_name(std::string* message_name) {
  if (message_name != nullptr) {
    
  } else {
    
  }
  _impl_.message_name_.SetAllocated(message_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_name_.IsDefault()) {
    _impl_.message_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.message_name)
}

// string table_name = 2;
inline void CassandraSchema::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& CassandraSchema::table_name() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CassandraSchema::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.table_name)
}
inline std::string* CassandraSchema::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.table_name)
  return _s;
}
inline const std::string& CassandraSchema::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void CassandraSchema::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CassandraSchema::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CassandraSchema::release_table_name() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.table_name)
  return _impl_.table_name_.Release();
}
inline void CassandraSchema::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.table_name)
}

// repeated .structs.CassandraField fields = 3;
inline int CassandraSchema::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int CassandraSchema::fields_size() const {
  return _internal_fields_size();
}
inline void CassandraSchema::clear_fields() {
  _impl_.fields_.Clear();
}
inline ::structs::CassandraField* CassandraSchema::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.fields)
  return _impl_.fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraField >*
CassandraSchema::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:structs.CassandraSchema.fields)
  return &_impl_.fields_;
}
inline const ::structs::CassandraField& CassandraSchema::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const ::structs::CassandraField& CassandraSchema::fields(int index) const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.fields)
  return _internal_fields(index);
}
inline ::structs::CassandraField* CassandraSchema::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline ::structs::CassandraField* CassandraSchema::add_fields() {
  ::structs::CassandraField* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:structs.CassandraSchema.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraField >&
CassandraSchema::fields() const {
  // @@protoc_insertion_point(field_list:structs.CassandraSchema.fields)
  return _impl_.fields_;
}

// string compaction_strategy = 4;
inline void CassandraSchema::clear_compaction_strategy() {
  _impl_.compaction_strategy_.ClearToEmpty();
}
inline const std::string& CassandraSchema::compaction_strategy() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.compaction_strategy)
  return _internal_compaction_strategy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CassandraSchema::set_compaction_strategy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.compaction_strategy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.compaction_strategy)
}
inline std::string* CassandraSchema::mutable_compaction_strategy() {
  std::string* _s = _internal_mutable_compaction_strategy();
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.compaction_strategy)
  return _s;
}
inline const std::string& CassandraSchema::_internal_compaction_strategy() const {
  return _impl_.compaction_strategy_.Get();
}
inline void CassandraSchema::_internal_set_compaction_strategy(const std::string& value) {
  
  _impl_.compaction_strategy_.Set(value, GetArenaForAllocation());
}
inline std::string* CassandraSchema::_internal_mutable_compaction_strategy() {
  
  return _impl_.compaction_strategy_.Mutable(GetArenaForAllocation());
}
inline std::string* CassandraSchema::release_compaction_strategy() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.compaction_strategy)
  return _impl_.compaction_strategy_.Release();
}
inline void CassandraSchema::set_allocated_compaction_strategy(std::string* compaction_strategy) {
  if (compaction_strategy != nullptr) {
    
  } else {
    
  }
  _impl_.compaction_strategy_.SetAllocated(compaction_strategy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compaction_strategy_.IsDefault()) {
    _impl_.compaction_strategy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.compaction_strategy)
}

// string compression_strategy = 5;
inline void CassandraSchema::clear_compression_strategy() {
  _impl_.compression_strategy_.ClearToEmpty();
}
inline const std::string& CassandraSchema::compression_strategy() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.compression_strategy)
  return _internal_compression_strategy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CassandraSchema::set_compression_strategy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.compression_strategy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.compression_strategy)
}
inline std::string* CassandraSchema::mutable_compression_strategy() {
  std::string* _s = _internal_mutable_compression_strategy();
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.compression_strategy)
  return _s;
}
inline const std::string& CassandraSchema::_internal_compression_strategy() const {
  return _impl_.compression_strategy_.Get();
}
inline void CassandraSchema::_internal_set_compression_strategy(const std::string& value) {
  
  _impl_.compression_strategy_.Set(value, GetArenaForAllocation());
}
inline std::string* CassandraSchema::_internal_mutable_compression_strategy() {
  
  return _impl_.compression_strategy_.Mutable(GetArenaForAllocation());
}
inline std::string* CassandraSchema::release_compression_strategy() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.compression_strategy)
  return _impl_.compression_strategy_.Release();
}
inline void CassandraSchema::set_allocated_compression_strategy(std::string* compression_strategy) {
  if (compression_strategy != nullptr) {
    
  } else {
    
  }
  _impl_.compression_strategy_.SetAllocated(compression_strategy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compression_strategy_.IsDefault()) {
    _impl_.compression_strategy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.compression_strategy)
}

// string java_package = 6;
inline void CassandraSchema::clear_java_package() {
  _impl_.java_package_.ClearToEmpty();
}
inline const std::string& CassandraSchema::java_package() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.java_package)
  return _internal_java_package();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CassandraSchema::set_java_package(ArgT0&& arg0, ArgT... args) {
 
 _impl_.java_package_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.java_package)
}
inline std::string* CassandraSchema::mutable_java_package() {
  std::string* _s = _internal_mutable_java_package();
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.java_package)
  return _s;
}
inline const std::string& CassandraSchema::_internal_java_package() const {
  return _impl_.java_package_.Get();
}
inline void CassandraSchema::_internal_set_java_package(const std::string& value) {
  
  _impl_.java_package_.Set(value, GetArenaForAllocation());
}
inline std::string* CassandraSchema::_internal_mutable_java_package() {
  
  return _impl_.java_package_.Mutable(GetArenaForAllocation());
}
inline std::string* CassandraSchema::release_java_package() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.java_package)
  return _impl_.java_package_.Release();
}
inline void CassandraSchema::set_allocated_java_package(std::string* java_package) {
  if (java_package != nullptr) {
    
  } else {
    
  }
  _impl_.java_package_.SetAllocated(java_package, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.java_package_.IsDefault()) {
    _impl_.java_package_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.java_package)
}

// string java_class = 7;
inline void CassandraSchema::clear_java_class() {
  _impl_.java_class_.ClearToEmpty();
}
inline const std::string& CassandraSchema::java_class() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.java_class)
  return _internal_java_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CassandraSchema::set_java_class(ArgT0&& arg0, ArgT... args) {
 
 _impl_.java_class_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.java_class)
}
inline std::string* CassandraSchema::mutable_java_class() {
  std::string* _s = _internal_mutable_java_class();
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.java_class)
  return _s;
}
inline const std::string& CassandraSchema::_internal_java_class() const {
  return _impl_.java_class_.Get();
}
inline void CassandraSchema::_internal_set_java_class(const std::string& value) {
  
  _impl_.java_class_.Set(value, GetArenaForAllocation());
}
inline std::string* CassandraSchema::_internal_mutable_java_class() {
  
  return _impl_.java_class_.Mutable(GetArenaForAllocation());
}
inline std::string* CassandraSchema::release_java_class() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.java_class)
  return _impl_.java_class_.Release();
}
inline void CassandraSchema::set_allocated_java_class(std::string* java_class) {
  if (java_class != nullptr) {
    
  } else {
    
  }
  _impl_.java_class_.SetAllocated(java_class, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.java_class_.IsDefault()) {
    _impl_.java_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.java_class)
}

// -------------------------------------------------------------------

// CassandraSchemas

// repeated .structs.CassandraSchema schema = 1;
inline int CassandraSchemas::_internal_schema_size() const {
  return _impl_.schema_.size();
}
inline int CassandraSchemas::schema_size() const {
  return _internal_schema_size();
}
inline void CassandraSchemas::clear_schema() {
  _impl_.schema_.Clear();
}
inline ::structs::CassandraSchema* CassandraSchemas::mutable_schema(int index) {
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchemas.schema)
  return _impl_.schema_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraSchema >*
CassandraSchemas::mutable_schema() {
  // @@protoc_insertion_point(field_mutable_list:structs.CassandraSchemas.schema)
  return &_impl_.schema_;
}
inline const ::structs::CassandraSchema& CassandraSchemas::_internal_schema(int index) const {
  return _impl_.schema_.Get(index);
}
inline const ::structs::CassandraSchema& CassandraSchemas::schema(int index) const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchemas.schema)
  return _internal_schema(index);
}
inline ::structs::CassandraSchema* CassandraSchemas::_internal_add_schema() {
  return _impl_.schema_.Add();
}
inline ::structs::CassandraSchema* CassandraSchemas::add_schema() {
  ::structs::CassandraSchema* _add = _internal_add_schema();
  // @@protoc_insertion_point(field_add:structs.CassandraSchemas.schema)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::structs::CassandraSchema >&
CassandraSchemas::schema() const {
  // @@protoc_insertion_point(field_list:structs.CassandraSchemas.schema)
  return _impl_.schema_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace structs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::structs::RepeatedHandler> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structs::RepeatedHandler>() {
  return ::structs::RepeatedHandler_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_structs_2fcassandra_2fcassandra_2eproto
